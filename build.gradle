import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

group = 'hnt.spring'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven {
		url 'https://packages.confluent.io/maven/'
	}
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.avro:avro-maven-plugin:1.11.3'
	implementation 'org.apache.avro:avro:1.11.4'
	implementation group: 'io.confluent', name: 'kafka-schema-registry-client', version: '7.4.0'
	implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '7.4.0'
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
	source("src/main/resources/avro")
	outputDir = file("src/main/java")
}

tasks.named("compileJava").configure {
	source(generateAvro)
}


tasks.named('test') {
	useJUnitPlatform()
}
